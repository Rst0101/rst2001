this.config = {
    "name": "pending",
    "aliases": ["pending"],
    "version": "1.1.0",
    "author": "Niiozic, updated by DongDev",
    "role": 3,
    "info": "Qu·∫£n l√Ω tin nh·∫Øn ch·ªù c·ªßa bot",
    "Category": "Admin",
    "guides": "[u] [t] [a] [approveall] [rejectall]",
    "cd": 5,
    "hasPrefix": true,
    "images": []
};
const fs = require('fs-extra');
const axios = require("axios");
const request = require('request');
this.onReply = async function({ api, event, onReply }) {
    if (String(event.senderID) !== String(onReply.author)) return;
    
    const { body, threadID, messageID } = event;
    let count = 0;

    if (isNaN(body) && (body.startsWith("c") || body.startsWith("cancel"))) {
        const indices = body.slice(1).split(/\s+/);

        for (const singleIndex of indices) {
            if (isNaN(singleIndex) || singleIndex <= 0 || singleIndex > onReply.pending.length) {
                return api.sendMessage(`‚Üí ${singleIndex} Kh√¥ng ph·∫£i l√† m·ªôt con s·ªë h·ª£p l·ªá`, threadID, messageID);
            }
        }

        return api.sendMessage(`[ PENDING ] - ƒê√£ t·ª´ ch·ªëi th√†nh c√¥ng`, threadID, messageID);
    } else {
        const indices = body.split(/\s+/);

        for (const singleIndex of indices) {
            if (isNaN(singleIndex) || singleIndex <= 0 || singleIndex > onReply.pending.length) {
                return api.sendMessage(`‚Üí ${singleIndex} Kh√¥ng ph·∫£i l√† m·ªôt con s·ªë h·ª£p l·ªá`, threadID, messageID);
            }

            const pendingRequest = onReply.pending[singleIndex - 1];
            api.changeNickname(`„Äé ${global.config.PREFIX} „Äè ‚™º ${global.config.BOTNAME || "ùô±ùôæùöÉ ùô≥ùöòùöóùöêùô≥ùöéùöüüëæ"}`, pendingRequest.threadID, api.getCurrentUserID());
            await api.sendMessage(`‚úÖ Ph√™ Duy·ªát Th√†nh C√¥ng`, pendingRequest.threadID);
            count++;
        }

        return api.sendMessage(`[ PENDING ] - ƒê√£ ph√™ duy·ªát th√†nh c√¥ng ${count} y√™u c·∫ßu`, threadID, messageID);
    }
};
this.onRun = async function({ api, event, args, permission }) {
    if (args.join() == "") {
        api.sendMessage("‚ùØ Pending user: H√†ng ch·ªù ng∆∞·ªùi d√πng\n‚ùØ Pending thread: H√†ng ch·ªù nh√≥m\n‚ùØ Pending all: T·∫•t c·∫£ box ƒëang ch·ªù duy·ªát\n‚ùØ Approve all: Duy·ªát t·∫•t c·∫£\n‚ùØ Reject all: T·ª´ ch·ªëi t·∫•t c·∫£", event.threadID, event.messageID);
        return;
    }
    const commandName = this.config.name;
    const { threadID, messageID } = event;
    const action = args[0].toLowerCase();
    let msg = "", index = 1;
    try {
        const spam = await api.getThreadList(100, null, ["OTHER"]) || [];
        const pending = await api.getThreadList(100, null, ["PENDING"]) || [];
        const list = [...spam, ...pending];
        if (action === "user" || action === "u" || action === "-u") {
            const userList = list.filter(group => !group.isGroup);
            for (const single of userList) msg += `${index++}. ${single.name}\n${single.threadID}\n`;
            if (userList.length) {
                return api.sendMessage(`‚Üí T·ªïng s·ªë ng∆∞·ªùi d√πng c·∫ßn duy·ªát: ${userList.length} ng∆∞·ªùi d√πng\n${msg}\nReply (ph·∫£n h·ªìi) theo stt ƒë·ªÉ duy·ªát`, threadID, (error, info) => {
                    global.Seiko.onReply.push({
                        name: commandName,
                        messageID: info.messageID,
                        author: event.senderID,
                        pending: userList
                    });
                }, messageID);
            } else {
                return api.sendMessage("[ PENDING ] - Hi·ªán t·∫°i kh√¥ng c√≥ ng∆∞·ªùi d√πng n√†o trong h√†ng ch·ªù", threadID, messageID);
            }
        } else if (action === "thread" || action === "t" || action === "-t") {
            const threadList = list.filter(group => group.isSubscribed && group.isGroup);
            for (const single of threadList) msg += `${index++}. ${single.name}\n${single.threadID}\n`;
            if (threadList.length) {
                return api.sendMessage(`‚Üí T·ªïng s·ªë nh√≥m c·∫ßn duy·ªát: ${threadList.length} nh√≥m\n${msg}\nReply (ph·∫£n h·ªìi) theo stt ƒë·ªÉ duy·ªát`, threadID, (error, info) => {
                    global.Seiko.onReply.push({
                        name: commandName,
                        messageID: info.messageID,
                        author: event.senderID,
                        pending: threadList
                    });
                }, messageID);
            } else {
                return api.sendMessage("[ PENDING ] - Hi·ªán t·∫°i kh√¥ng c√≥ nh√≥m n√†o trong h√†ng ch·ªù", threadID, messageID);
            }
        } else if (action === "all" || action === "a" || action === "-a") {
            for (const single of list) msg += `${index++}. ${single.name}\n${single.threadID}\n`;
            if (list.length) {
                return api.sendMessage(`‚Üí T·ªïng s·ªë User & Thread c·∫ßn duy·ªát: ${list.length} User & Thread\n${msg}\nReply (ph·∫£n h·ªìi) theo stt ƒë·ªÉ duy·ªát`, threadID, (error, info) => {
                    global.Seiko.onReply.push({
                        name: commandName,
                        messageID: info.messageID,
                        author: event.senderID,
                        pending: list
                    });
                }, messageID);
            } else {
                return api.sendMessage("[ PENDING ] - Hi·ªán t·∫°i kh√¥ng c√≥ User & Thread n√†o trong h√†ng ch·ªù", threadID, messageID);
            }
        } else if (action === "approveall") {
            for (const pendingRequest of list) {
                api.changeNickname(`„Äé ${global.config.PREFIX} „Äè ‚™º ${global.config.BOTNAME || "ùô±ùôæùöÉ ùô≥ùöòùöóùöêùô≥ùöéùöüüëæ"}`, pendingRequest.threadID, api.getCurrentUserID());
                api.sendMessage("", event.threadID, () => api.sendMessage(`‚ùØ Admin Bot: ${global.config.FACEBOOK_ADMIN}`, pendingRequest.threadID));
                count++;
            }
            return api.sendMessage(`[ PENDING ] - ƒê√£ ph√™ duy·ªát t·∫•t c·∫£ ${count} y√™u c·∫ßu`, threadID, messageID);
        } /*else if (action === "reject
                count++;
            }
            return api.sendMessage(`[ PENDING ] - ƒê√£ t·ª´ ch·ªëi t·∫•t c·∫£ ${count} y√™u c·∫ßu`, threadID, messageID);
        } else {
            return api.sendMessage("[ PENDING ] - L·ªánh kh√¥ng h·ª£p l·ªá", threadID, messageID);
        }*/
    } catch (e) {
        return api.sendMessage("[ PENDING ] - Kh√¥ng th·ªÉ l·∫•y danh s√°ch ch·ªù", threadID, messageID);
    }
};