this.config = {
 name: "money",
 aliases: ["mon"],
 version: "1.2.9",
 role: 0,
 author: "DongDev",
 info: "Ki·ªÉm tra s·ªë ti·ªÅn c·ªßa b·∫£n th√¢n, ng∆∞·ªùi ƒë∆∞·ª£c tag, g·ª≠i ti·ªÅn, c·ªông ti·ªÅn, set ti·ªÅn, x√≥a ti·ªÅn v√† reset ti·ªÅn",
 Category: "Box chat",
 guides: "[Tr·ªëng|Tag|pay <@tag> <s·ªë ti·ªÅn>|add <s·ªë ti·ªÅn> [@tag]|set <s·ªë ti·ªÅn> [@tag]|clean [@tag]|reset]",
 cd: 5,
 hasPrefix: true,
 images: [],
};
this.onRun = async function({ api, event, args, Currencies, Users, msg, permssion }) {
 const axios = require('axios');
 const { threadID, messageID, senderID } = event;
 const { throwError } = global.utils;
 const mentionID = Object.keys(event.mentions);
 const money = String(args[1]);
 var message = [];
 var error = [];
 try {
   switch (args[0]) {
     case "add": {
     if (permssion < 2) return msg.reply("‚ùé B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y");
       if (mentionID.length != 0) {
         for (singleID of mentionID) {
           if (!money || isNaN(money)) return api.sendMessage('‚ùé Money ph·∫£i l√† m·ªôt s·ªë', threadID, messageID);
           try {
             await Currencies.increaseMoney(singleID, money);
             message.push(singleID);
           } catch (e) { error.push(e); console.log(e) };
         }
         return api.sendMessage(`‚úÖ ƒê√£ c·ªông th√™m ${formatNumber(money)}$ cho ${message.length} ng∆∞·ªùi`, threadID, function() {
           if (error.length != 0) return api.sendMessage(`‚ùé Kh√¥ng th·ªÉ c·ªông th√™m ti·ªÅn cho ${error.length} ng∆∞·ªùi`, threadID)
         }, messageID);
       } else {
         if (!money || isNaN(money)) return api.sendMessage('Money ph·∫£i l√† m·ªôt s·ªë', threadID, messageID);
         try {
           var uid = event.senderID;
           if (event.type == "message_reply") {
             uid = event.messageReply.senderID;
           } else if (args.length === 3) {
             uid = args[2];
           }
           await Currencies.increaseMoney(uid, String(money));
           message.push(uid);
         } catch (e) { error.push(e) };
         return api.sendMessage(`‚úÖ ƒê√£ c·ªông th√™m ${formatNumber(money)}$ cho ${uid !== senderID ? '1 ng∆∞·ªùi' : 'b·∫£n th√¢n'}`, threadID, function() {
           if (error.length != 0) return api.sendMessage(`‚ùé Kh√¥ng th·ªÉ c·ªông th√™m ti·ªÅn cho ${uid !== senderID ? '1 ng∆∞·ªùi' : 'b·∫£n th√¢n'}`, threadID)
         }, messageID);
       }
     }
     case 'all': {
     if (permssion < 2) return msg.reply("‚ùé B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y");
       const allUserID = event.participantIDs;
       for (const singleUser of allUserID) {
         await Currencies.increaseMoney(singleUser, String(money));
       }
       return api.sendMessage(`‚úÖ ƒê√£ c·ªông th√™m ${formatNumber(money)}$ cho to√†n b·ªô th√†nh vi√™n`, event.threadID);
     }
     case "set": {
     if (permssion < 2) return msg.reply("‚ùé B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y");
       if (mentionID.length != 0) {
         for (singleID of mentionID) {
           if (!money || isNaN(money)) return throwError(this.config.name, threadID, messageID);
           try {
             await Currencies.setData(singleID, { money });
             message.push(singleID);
           } catch (e) { error.push(e) };
         }
         return api.sendMessage(`‚úÖ ƒê√£ set th√†nh c√¥ng ${formatNumber(money)}$ cho ${message.length} ng∆∞·ªùi`, threadID, function() {
           if (error.length != 0) return api.sendMessage(`‚ùé Kh√¥ng th·ªÉ set ti·ªÅn cho ${error.length} ng∆∞·ªùi`, threadID)
         }, messageID);
       } else {
         if (!money || isNaN(money)) return throwError(this.config.name, threadID, messageID);
         try {
           var uid = event.senderID;
           if (event.type == "message_reply") {
             uid = event.messageReply.senderID;
           }
           await Currencies.setData(uid, { money });
           message.push(uid);
         } catch (e) { error.push(e) };
         return api.sendMessage(`‚úÖ ƒê√£ set th√†nh c√¥ng ${formatNumber(money)}$ cho ${uid !== senderID ? '1 ng∆∞·ªùi' : 'b·∫£n th√¢n'}`, threadID, function() {
           if (error.length != 0) return api.sendMessage(`‚ùé Kh√¥ng th·ªÉ set ti·ªÅn cho ${uid !== senderID ? '1 ng∆∞·ªùi' : 'b·∫£n th√¢n'}`, threadID)
         }, messageID);
       }
     }
     case "clean": {
     if (permssion < 2) return msg.reply("‚ùé B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y");
       if (args[1] === 'all') {
         const data = event.participantIDs;
         for (const userID of data) {
           const userData = (await Currencies.getData(userID)).data;
           if (userData !== undefined) {
             userData.money = '0';
             await Currencies.setData(userID, userData);
           }
         }
         return api.sendMessage("‚úÖ ƒê√£ x√≥a th√†nh c√¥ng to√†n b·ªô ti·ªÅn c·ªßa nh√≥m", event.threadID);
       }
       if (mentionID.length != 0) {
         for (singleID of mentionID) {
           try {
             await Currencies.setData(singleID, { money: 0 });
             message.push(singleID);
           } catch (e) { error.push(e) };
         }
         return api.sendMessage(`‚úÖ ƒê√£ x√≥a th√†nh c√¥ng to√†n b·ªô ti·ªÅn c·ªßa ${message.length} ng∆∞·ªùi`, threadID, function() {
           if (error.length != 0) return api.sendMessage(`‚ùé Kh√¥ng th·ªÉ x√≥a to√†n b·ªô ti·ªÅn c·ªßa ${error.length} ng∆∞·ªùi`, threadID)
         }, messageID);
       } else {
         try {
           var uid = event.senderID;
           if (event.type == "message_reply") {
             uid = event.messageReply.senderID;
           }
           await Currencies.setData(uid, { money: 0 });
           message.push(uid);
         } catch (e) { error.push(e) };
         return api.sendMessage(`‚úÖ ƒê√£ x√≥a th√†nh c√¥ng ti·ªÅn c·ªßa ${uid !== senderID ? '1 ng∆∞·ªùi' : 'b·∫£n th√¢n'}`, threadID, function() {
           if (error.length != 0) return api.sendMessage(`‚ùé Kh√¥ng th·ªÉ x√≥a ti·ªÅn c·ªßa ${uid !== senderID ? '1 ng∆∞·ªùi' : 'b·∫£n th√¢n'}`, threadID)
         }, messageID);
       }
     }
     case "reset": {
     if (permssion < 3) return msg.reply("‚ùé B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y");
       const allUserData = await Currencies.getAll(['userID']);
       for (const userData of allUserData) {
         const userID = userData.userID;
         try {
           await Currencies.setData(userID, { money: 0 });
           message.push(userID);
         } catch (e) { error.push(e) };
       }
       return api.sendMessage(`‚úÖ ƒê√£ x√≥a to√†n b·ªô d·ªØ li·ªáu ti·ªÅn c·ªßa ${message.length} ng∆∞·ªùi`, threadID, function() {
         if (error.length != 0) return api.sendMessage(`‚ùé Kh√¥ng th·ªÉ x√≥a d·ªØ li·ªáu ti·ªÅn c·ªßa ${error.length} ng∆∞·ªùi`, threadID)
       }, messageID);
     }
     case "pay": {
       if (mentionID.length != 1) return api.sendMessage("B·∫°n c·∫ßn tag m·ªôt ng∆∞·ªùi ƒë·ªÉ g·ª≠i ti·ªÅn.", threadID, messageID);
       const mention = mentionID[0];
       const amount = parseInt(args[2]);
       if (isNaN(amount) || amount <= 0) return api.sendMessage("S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá.", threadID, messageID);
       const senderMoney = (await Currencies.getData(senderID)).money;
       if (senderMoney < amount) return api.sendMessage("B·∫°n kh√¥ng ƒë·ªß ti·ªÅn ƒë·ªÉ th·ª±c hi·ªán giao d·ªãch n√†y.", threadID, messageID);
       await Currencies.decreaseMoney(senderID, amount);
       await Currencies.increaseMoney(mention, amount);
       return api.sendMessage(`B·∫°n ƒë√£ g·ª≠i ${formatNumber(amount)}$ cho ${event.mentions[mention].replace(/\@/g, "")}`, threadID, messageID);
     }
     default: {
       if (args.length === 0) {
         const money = (await Currencies.getData(senderID)).money;
         const moneyFormatted = money.toString().replace(/\B(?=(\d{3})+(?!\d))/g, '.');
         const name = await Users.getNameUser(senderID);
         return api.sendMessage(`üé´ ${name} hi·ªán c√≥ ${moneyFormatted}$`, threadID, messageID);
       } else if (mentionID.length == 1) {
         const mention = mentionID[0];
         let money = (await Currencies.getData(mention)).money;
         money = money || 0;
         const moneyFormatted = money.toString().replace(/\B(?=(\d{3})+(?!\d))/g, '.');
         return api.sendMessage({ body: `üé´ ${event.mentions[mention].replace(/\@/g, "")} hi·ªán c√≥ ${moneyFormatted}$` }, threadID, messageID);
       }
       return global.utils.throwError(this.config.name, threadID, messageID);
     }
   }
 } catch (e) {
   console.log(e);
 }
}
function formatNumber(number) {
 return number.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
}